# Broker requires roles to perform certain tasks.
# The Broker requires at least permission to get its configuration file.
# The Broker requires permission to create/delete any resource defined
# as a template, as well as any permission granted with templated roles
# or cluster roles.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: couchbase-service-broker
rules:
- apiGroups:
  - servicebroker.couchbase.com
  resources:
  - servicebrokerconfigs
  verbs:
  - list
  - watch
  - update
- apiGroups:
  - couchbase.com
  resources:
  - couchbaseautoscalers
  - couchbaseautoscalers/status
  - couchbaseclusters
  - couchbasebuckets
  - couchbaseephemeralbuckets
  - couchbasememcachedbuckets
  - couchbasereplications
  - couchbaseusers
  - couchbasegroups
  - couchbaseroles
  - couchbaserolebindings
  - couchbasebackups
  - couchbasebackuprestores
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  - nodes
  - pods
  - pods/status
  - services
  - persistentvolumeclaims
  - secrets
  - serviceaccounts
  - configmaps
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  - clusterroles
  - clusterrolebindings
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - "*"
---
# The main Broker configuration.  This defines what classes and plans a client
# can see, along with what can be configured.  Templates are bound to a plan and
# are rendered and created when a service instance/binding is created, then cleaned
# up when deleted.
apiVersion: servicebroker.couchbase.com/v1alpha1
kind: ServiceBrokerConfig
metadata:
  name: couchbase-service-broker
spec:
  # Catalog is simply verbatim what will be exposed on GET /v2/catalog
  catalog:
    services:
    - id: 8522e991-07bc-4225-a859-1eec1e333153
      name: couchbase-developer
      description: Couchbase Server developer deployments
      tags:
      - database
      - nosql
      bindable: true
      planUpdatable: false
      plans:
      - id: ec0f2c9b-0277-46d7-985f-ba1fbf3b068d
        name: couchbase-developer-private
        description: Cluster accessible within the Kubernetes cluster
        schemas:
          serviceInstance:
            create:
              parameters:
                $schema: "http://json-schema.org/draft-04/schema#"
                type: object
                required:
                  - password
                properties:
                  password:
                    description: "Administrator password"
                    type: string
                  size:
                    description: "Cluster size"
                    type: number
                    minimum: 3
                    maximum: 9
            update:
              parameters:
                $schema: "http://json-schema.org/draft-04/schema#"
                type: object
                required:
                  - password
                properties:
                  password:
                    description: "Administrator password"
                    type: string
                  size:
                    description: "Cluster size"
                    type: number
                    minimum: 3
                    maximum: 9
  # Templates allow the end user to define anything they want to be created.
  # The parameters if specified define where the source is, either requesst
  # metadata or parameters.  Parameters allow defaults to be specified if
  # the parameter is not defined.  Parameters are applied to the resource one
  # or many times as required.
  templates:
  - name: couchbase-operator-serviceaccount
    singleton: true
    template:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: couchbase-operator
  - name: couchbase-operator-role
    singleton: true
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: couchbase-operator
      rules:
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - list
        - watch
        - create
        - update
        - delete
      - apiGroups:
        - couchbase.com
        resources:
        - couchbaseclusters
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - couchbase.com
        resources:
        - couchbasebuckets
        - couchbaseephemeralbuckets
        - couchbasememcachedbuckets
        - couchbasereplications
        - couchbaseusers
        - couchbasegroups
        - couchbaseroles
        - couchbaserolebindings
        - couchbasebackups
        verbs:
        - list
        - watch
      - apiGroups:
        - couchbase.com
        resources:
        - couchbasebackuprestores
        verbs:
        - list
        - watch
        - delete
      - apiGroups:
        - couchbase.com
        resources:
        - couchbaseautoscalers
        verbs:
        - list
        - watch
        - create
        - delete
      - apiGroups:
        - couchbase.com
        resources:
        - couchbaseautoscalers/status
        verbs:
        - update
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - get
        - create
        - update
        - delete
      - apiGroups:
        - ""
        resources:
        - pods
        - pods/status
        - services
        - persistentvolumeclaims
        verbs:
        - get
        - list
        - watch
        - create
        - update
        - delete
        - patch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - list
        - create
        - update
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get
        - create
        - update
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - create
        - delete
        - list
        - watch
  - name: couchbase-operator-rolebinding
    singleton: true
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: couchbase-operator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: couchbase-operator
      subjects:
      - kind: ServiceAccount
        name: couchbase-operator
        namespace: '{{ registry "namespace" }}'
  - name: couchbase-operator-deployment
    singleton: true
    template:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: couchbase-operator
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: couchbase-operator
        template:
          metadata:
            labels:
              app: couchbase-operator
          spec:
            containers:
            - name: couchbase-operator
              image: couchbase/operator:2.1.0
              args:
              - --pod-create-timeout=10m
              command:
              - couchbase-operator
              env:
              - name: WATCH_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              ports:
              - containerPort: 8080
                name: http
              - containerPort: 8383
                name: prometheus
              readinessProbe:
                httpGet:
                  path: /readyz
                  port: http
                  scheme: HTTP
            serviceAccountName: couchbase-operator
  - name: couchbase-admin-secret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ printf "%v-admin" (registry "instance-name") }}'
      stringData:
        username: Administrator
        password: '{{ parameter "/password" }}'
  - name: couchbase-operator-tls-secret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ printf "%v-operator-tls" (registry "instance-name") }}'
      stringData:
        ca.crt: '{{ registry "ca-cert" }}'
  - name: couchbase-server-tls-secret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ printf "%v-server-tls" (registry "instance-name") }}'
      stringData:
        pkey.key: '{{ registry "server-key" }}'
        chain.pem: '{{ registry "server-cert" }}'
  - name: cluster-labels
    template:
      cluster: '{{ registry "instance-name" }}'
  - name: cluster-selector
    template:
      matchLabels: '{{ snippet "cluster-labels" }}'
  - name: couchbase-developer-private
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseCluster
      metadata:
        name: '{{ registry "instance-name" }}'
      spec:
        image: '{{ parameter "/image" | default "couchbase/server:6.6.2" }}'
        security:
          adminSecret: '{{ printf "%v-admin" (registry "instance-name") }}'
          rbac:
            managed: true
            selector: '{{ snippet "cluster-selector" }}'
        networking:
          tls:
            static:
              operatorSecret: '{{ printf "%v-operator-tls" (registry "instance-name") }}'
              serverSecret: '{{ printf "%v-server-tls" (registry "instance-name") }}'
        buckets:
          managed: true
          selector: '{{ snippet "cluster-selector" }}'
        servers:
        - name: default
          services:
          - data
          - index
          - query
          size: '{{ parameter "/size" | default 3 }}'
  - name: couchbase-bucket
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseBucket
      metadata:
        name: '{{ registry "binding-name" }}'
        labels: '{{ snippet "cluster-labels" }}'
  - name: couchbase-user-secret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ registry "binding-name" }}'
      data:
        password: '{{ registry "password" }}'
  - name: couchbase-user
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseUser
      metadata:
        name: '{{ registry "binding-name" }}'
        labels: '{{ snippet "cluster-labels" }}'
      spec:
        authDomain: local
        authSecret: '{{ registry "binding-name" }}'
  - name: couchbase-group
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseGroup
      metadata:
        name: '{{ registry "binding-name" }}'
        labels: '{{ snippet "cluster-labels" }}'
      spec:
        roles:
        - name: bucket_admin
          bucket: '{{ registry "binding-name" }}'
  - name: couchbase-role-binding
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseRoleBinding
      metadata:
        name: '{{ registry "binding-name" }}'
        labels: '{{ snippet "cluster-labels" }}'
      spec:
        subjects:
        - kind: CouchbaseUser
          name: '{{ registry "binding-name" }}'
        roleRef:
          kind: CouchbaseGroup
          name: '{{ registry "binding-name" }}'
  - name: credentials
    template:
      connection-string: '{{ printf "couchbases://%v-srv.%v" (registry "instance-name") (registry "namespace") }}'
      ca.pem: '{{ registry "ca-cert" }}'
      username: '{{ registry "username" }}'
      password: '{{ registry "password" }}'
      bucket: '{{ registry "binding-name" }}'
  # Bindings bind templates to service plans.  These allow the specification of
  # exactly what templates are created when a plan is instantiated or bound to.
  bindings:
  - name: couchbase-developer-private
    service: couchbase-developer
    plan: couchbase-developer-private
    serviceInstance:
      registry:
      - name: instance-name
        value: '{{ printf "%s-%s" (generatePetName 2) (generatePassword 8 "abcdefghijklmnopqrstuvwxyz0123456789") }}'
      - name: dashboard-url
        value: '{{ printf "https://%s.%s:18091" (registry "instance-name") (registry "namespace") }}'
      - name: ca-key
        value: '{{ generatePrivateKey "RSA" "PKCS#8" 2048 }}'
      - name: ca-cert
        value: '{{ generateCertificate (registry "ca-key") "Couchbase Server CA" "87600h" "CA" nil nil nil }}'
      - name: server-key
        value: '{{ generatePrivateKey "RSA" "PKCS#1" 2048 }}'
      - name: server-cert
        value: '{{ generateCertificate (registry "server-key") "Couchbase Server" "87600h" "Server" (list (printf "DNS:%s-srv" (registry "instance-name")) (printf "DNS:%s-srv.%s" (registry "instance-name") (registry "namespace")) (printf "DNS:%s-srv.%s.svc" (registry "instance-name") (registry "namespace")) (printf "DNS:*.%s-srv.%s.svc.cluster.local" (registry "instance-name") (registry "namespace")) (printf "DNS:*.%s" (registry "instance-name")) (printf "DNS:*.%s.%s" (registry "instance-name") (registry "namespace")) (printf "DNS:*.%s.%s.svc" (registry "instance-name") (registry "namespace")) (printf "DNS:*.%s.%s.svc.cluster.local" (registry "instance-name") (registry "namespace")) "DNS:localhost") (registry "ca-key") (registry "ca-cert") }}'
      steps:
      - name: couchbase-operator
        templates:
        - couchbase-operator-serviceaccount
        - couchbase-operator-role
        - couchbase-operator-rolebinding
        - couchbase-operator-deployment
        # Readiness checks act as a barrier between one step and the next
        # and acts as a fail fast trigger.
        readinessChecks:
        - name: couchbase-operator-available
          timeout: 1m
          condition:
            apiVersion: apps/v1
            kind: Deployment
            namespace: '{{ registry "namespace" }}'
            name: couchbase-operator
            type: Available
            status: "True"
      - name: couchbase-cluster
        templates:
        - couchbase-admin-secret
        - couchbase-operator-tls-secret
        - couchbase-server-tls-secret
        - couchbase-developer-private
        readinessChecks:
        - name: couchbase-cluster-available
          timeout: 5m
          condition:
            apiVersion: couchbase.com/v2
            kind: CouchbaseCluster
            namespace: '{{ registry "namespace" }}'
            name: '{{ registry "instance-name" }}'
            type: Available
            status: "True"
    serviceBinding:
      registry:
      - name: binding-name
        value: '{{ printf "binding-%s" (registry "binding-id") }}'
      - name: password
        value: '{{ generatePassword 32 nil }}'
      - name: credentials
        value: '{{ snippet "credentials" }}'
      templates:
      - couchbase-bucket
      - couchbase-group
      - couchbase-role-binding
      - couchbase-user-secret
      - couchbase-user
